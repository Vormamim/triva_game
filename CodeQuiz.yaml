- question: What is the output of the following code snippet?

  code: |
    def binary_search(arr, target):
        left, right = 0, len(arr) - 1
        while left <= right:
            mid = (left + right) // 2
            if arr[mid] == target:
                return mid
            elif arr[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return -1

    nums = [1, 2, 3, 4, 5]
    print(binary_search(nums, 4))

  options:
    - A. 0
    - B. 1
    - C. 2
    - D. 3

  answer: D

- question: What is the time complexity of the following algorithm?

  code: |
    def foo(n):
        count = 0
        for i in range(n):
            for j in range(n):
                count += 1
        return count

  options:
    - A. O(1)
    - B. O(n)
    - C. O(n log n)
    - D. O(n^2)

  answer: D

- question: What is the output of the following code snippet?

  code: |
    def bubble_sort(arr):
        n = len(arr)
        for i in range(n):
            for j in range(0, n - i - 1):
                if arr[j] > arr[j + 1]:
                    arr[j], arr[j + 1] = arr[j + 1], arr[j]
        return arr

    nums = [4, 2, 1, 3, 5]
    sorted_nums = bubble_sort(nums)
    print(sorted_nums[2])

  options:
    - A. 1
    - B. 2
    - C. 3
    - D. 4

  answer: C

- question: What is the space complexity of the following algorithm?

  code: |
    def bar(n):
        if n <= 0:
            return 0
        return n + bar(n-1)

  options:
    - A. O(1)
    - B. O(n)
    - C. O(n log n)
    - D. O(n^2)

  answer: B

- question: What is the output of the following code snippet?

  code: |
    def insertion_sort(arr):
        for i in range(1, len(arr)):
            key = arr[i]
            j = i - 1
            while j >= 0 and key < arr[j]:
                arr[j + 1] = arr[j]
                j -= 1
            arr[j + 1] = key
        return arr

    nums = [4, 2, 1, 3, 5]
    sorted_nums = insertion_sort(nums)
    print(sorted_nums[0])

  options:
    - A. 1
    - B. 2
    - C. 3
    - D. 4

  answer: A

- question: What is the time complexity of the following algorithm?

  code: |
    def baz(n):
        if n <= 1:
            return 1
        return baz(n-1) + baz(n-2)

  options:
    - A. O(1)
    - B. O(n)
    - C. O(n log n)
    - D. O(2^n)

  answer: A
